{"version":3,"sources":["marker/passengerMarker.js","marker/stopMarker.js","map/map.js","App.js","serviceWorker.js","index.js"],"names":["PassengerMarker","props","longitude","lon","latitude","lat","className","StopMarker","useState","visible","setVisible","closestCount","onMouseEnter","onMouseLeave","BusMap","passengers","p","stops","s","length","calculateCenter","closestCounts","lines","type","coordinates","closest","Number","MAX_SAFE_INTEGER","sLat","sLon","dist","Math","sqrt","pow","coordString","push","calculateClosest","map","key","generateMarkers","passengerMarkers","stopMarkers","zoom","viewport","setViewport","style","width","height","mapStyle","accessToken","process","onViewportChange","id","data","source","paint","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d5986430.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Marker } from '@urbica/react-map-gl';\r\nimport './marker.css';\r\n\r\nfunction PassengerMarker(props) {\r\n    return (\r\n        <Marker\r\n            longitude={props.lon}\r\n            latitude={props.lat}\r\n        >\r\n            <div className=\"marker passenger-marker\">P</div>\r\n        </Marker>\r\n    )\r\n}\r\n\r\nexport default PassengerMarker","import React, { useState } from 'react';\r\nimport { Marker } from '@urbica/react-map-gl';\r\nimport './marker.css';\r\n\r\nfunction StopMarker(props) {\r\n    const [visible, setVisible] = useState('');\r\n\r\n    return (\r\n        <Marker\r\n            longitude={props.lon}\r\n            latitude={props.lat}\r\n        >\r\n            <div className={`marker-popup ${visible}`}>\r\n                Number of closest passengers: {' '}\r\n                {props.closestCount || 0}\r\n            </div>\r\n            <div\r\n                className=\"marker stop-marker\"\r\n                onMouseEnter={() => { setVisible(\"visible-popup\") }}\r\n                onMouseLeave={() => { setVisible(\"\") }}\r\n            >\r\n                S\r\n            </div>\r\n        </Marker>\r\n    )\r\n}\r\n\r\nexport default StopMarker","// React\r\nimport React, { useState } from 'react';\r\nimport MapGL, { Source, Layer } from '@urbica/react-map-gl';\r\nimport 'mapbox-gl/dist/mapbox-gl.css';\r\n\r\n// Components\r\nimport PassengerMarker from '../marker/passengerMarker';\r\nimport StopMarker from '../marker/stopMarker';\r\n\r\n// Data\r\nimport passengers from '../data/passengers.json';\r\nimport stops from '../data/stops.json'\r\n\r\nfunction calculateCenter() {\r\n    let lon = 0;\r\n    let lat = 0;\r\n\r\n    for (const p of passengers) {\r\n        lon += p.lon;\r\n        lat += p.lat;\r\n    }\r\n\r\n    for (const s of stops) {\r\n        lon += s.lon;\r\n        lat += s.lat;\r\n    }\r\n\r\n    lon /= (passengers.length + stops.length);\r\n    lat /= (passengers.length + stops.length);\r\n\r\n    return [lon, lat]\r\n}\r\n\r\nfunction calculateClosest() {\r\n    // Could be much more efficient but no point in preemptively optimizing :)\r\n\r\n    const closestCounts = {};\r\n    const lines = {\r\n        type: 'MultiLineString',\r\n        coordinates: []\r\n    };\r\n\r\n    for (const p of passengers) {\r\n        let closest = Number.MAX_SAFE_INTEGER;\r\n        let [sLat, sLon] = [0, 0];\r\n\r\n        for (const s of stops) {\r\n            const dist = Math.sqrt(Math.pow(s.lon - p.lon, 2) + Math.pow(s.lat - p.lat, 2));\r\n            if (dist < closest) {\r\n                closest = dist;\r\n                sLat = s.lat;\r\n                sLon = s.lon;\r\n            }\r\n        }\r\n\r\n        // Not the best but Javascript is not that great for these things\r\n        const coordString = `${sLat},${sLon}`;\r\n\r\n        if (!(coordString in closestCounts)) {\r\n            closestCounts[coordString] = 0;\r\n        }\r\n\r\n        closestCounts[coordString]++;\r\n        lines.coordinates.push([[p.lon, p.lat], [sLon, sLat]]);\r\n    }\r\n\r\n    return [closestCounts, lines]\r\n}\r\n\r\nfunction generateMarkers(closestCounts) {\r\n    const passengerMarkers = passengers.map(({lat, lon}) => (\r\n        <PassengerMarker\r\n            lat={lat}\r\n            lon={lon}\r\n            key={`${lat},${lon}`}\r\n        />\r\n    ));\r\n\r\n    const stopMarkers = stops.map(({lat, lon}) => {\r\n        return (\r\n        <StopMarker\r\n            lat={lat}\r\n            lon={lon}\r\n            key={`${lat},${lon}`}\r\n            closestCount={closestCounts[`${lat},${lon}`]}\r\n        />\r\n    )});\r\n\r\n    return [passengerMarkers, stopMarkers]\r\n}\r\n\r\nfunction BusMap() {\r\n    const [longitude, latitude] = calculateCenter();\r\n    const [closestCounts, lines] = calculateClosest();\r\n    let [passengerMarkers, stopMarkers] = generateMarkers(closestCounts);\r\n\r\n    const mapStyle = 'mapbox://styles/mapbox/light-v9';\r\n    const [viewport, setViewport] = useState({\r\n        longitude,\r\n        latitude,\r\n        zoom: 14.75\r\n    })\r\n    \r\n    return (\r\n        <MapGL\r\n        style={{ width: '100vw', height: '100vh' }}\r\n        mapStyle={mapStyle}\r\n        accessToken={process.env.REACT_APP_MAPBOX_API_KEY}\r\n        longitude={viewport.longitude}\r\n        latitude={viewport.latitude}\r\n        zoom={viewport.zoom}\r\n        onViewportChange={setViewport}\r\n        >\r\n            <Source id='closestPaths' type='geojson' data={lines} />\r\n            <Layer\r\n                id='closestPaths'\r\n                type='line'\r\n                source='closestPaths'\r\n                paint={{\r\n                  'line-color': '#888',\r\n                  'line-width': 3\r\n                }}\r\n            />\r\n            {passengerMarkers}\r\n            {stopMarkers}\r\n        </MapGL>\r\n    )\r\n}\r\n\r\nexport default BusMap","import React from 'react';\nimport BusMap from './map/map';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <BusMap/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}